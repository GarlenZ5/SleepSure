var DBDevice=function (mysqlPool, redisConnect){
	var self=this;
	
	const config=require('.././public/config.js');
	const func=require('.././public/func.js');
	const ErrMsg=require('.././public/ErrMsg.js');
	const mysql=require('./mysql.js');
	const redisClient=require('./redisClient.js');

	var userTable=config.DB_PREFIX+'USER';
	var tokenTable=config.DB_PREFIX+'USER_TOKEN';
	var bsTable=config.DB_PREFIX+'BASESTATION';
	var trackerTable=config.DB_PREFIX+'DEVICE';
	var babyTable=config.DB_PREFIX+'BABY';
	var babyPushSetTable=config.DB_PREFIX+'BABY_PUSH_SETTING';
	var pushSetTypeTable=config.DB_PREFIX+'PUSH_SETTING_TYPE';
	var eventTypeTable=config.DB_PREFIX+'EVENT_TYPE';
	var babyDataTable=config.DB_PREFIX+'BABY_DATA';
	var babyAlertTable=config.DB_PREFIX+'BABY_ALERT';
	var alertTypeTable=config.DB_PREFIX+'ALERT_TYPE';

	var db=new mysql(mysqlPool);
	var redis=new redisClient(redisConnect);
	this.alertType;

	this.init=function(){
		self.getAllAlertType(function(){});
	}

	this.getAllAlertType=function(callback){
		try{
			var sql="SELECT * FROM "+alertTypeTable;
			db.doquery(sql, [], function(err, res){
				if(err){
					console.log("getAllAlertType[ERROR]",e);
				}else{
					self.alertType=res;
				}

				callback()
			});
		}catch(e){
			console.log("getAllAlertType[BUG]",e);
		}
		
	}

	this.resolveCommandByte=function(command,callback){

		var mac=command.slice(6,12).toString('hex');
		var tracker_mac=command.slice(18,24).toString('hex');
		var command1=command.slice(26,27).toString('hex');
		var commandBaseInfo={
			"mac":mac,
			"tracker_mac":tracker_mac
		}
		switch(command1){
			case "11":
				var commandBaseInfo={
					"mac":mac,
					"hardwareVer":parseInt(command.slice(35,36).toString('hex'),16),
					"softwareVer":parseInt(command.slice(37,38).toString('hex'),16),
				}
				self.updateBasestationInfo(commandBaseInfo)
				break;
			case "12":
				self.updateHeartbeatTime(mac)
				break;
			case "14":
				self.updateTrackerStatus(commandBaseInfo,command.slice(34,35).toString('hex'))
				break;
			case "30":
				self.resolveCurrentData(mac,tracker_mac,command.slice(34,-2))
				break;
			case "0d":
				self.OTAResult(mac,command.slice(34,35).toString('hex'))
				break;
		}

	}
	this.updateBasestationInfo=function(data){
		try{
			var timed=new Date();
			var sqlString=	"INSERT INTO "+bsTable+"(mac,hardwareVer,softwareVer,createdTime) "+
							"VALUES(?,?,?,?) ON DUPLICATE KEY UPDATE updatedTime=?,hardwareVer=?"+
							",softwareVer=?";
			var valArr=[data.mac, data.hardwareVer, data.softwareVer, timed, timed, data.hardwareVer, data.softwareVer];
			db.doquery(sqlString, valArr, function(e, res){
				if(e){
					console.log("updateBasestationInfo:save/update basestation[ERROR]");
				}
				var redisData={
					"connectTime":timed,
					"hardwareVer":data.hardwareVer,
					"softwareVer":data.softwareVer
				}
				redis.setItem(data.mac,JSON.stringify(redisData));
				return;
			});
		}catch(e){
			console.log("updateBasestationInfo[BUG]",e);
			return;
		}
	}
	this.updateHeartbeatTime=function(mac){
		try{
			redis.getItem(mac)
			.then(redisData=>{
				if(redisData && redisData.length>0 && redisData!="{}"){
					var bsInfo=JSON.parse(redisData);
					var lastVer=func.getBsBinVer();
					if(bsInfo.hasOwnProperty("softwareVer")
						&& lastVer>Number(bsInfo.softwareVer)
						&& !bsInfo.isSendOTA){
						var param={
							'action':'OTA',
							'mac':mac,
						}
						process.send(param);
						bsInfo['isSendOTA']=true;
					}
					bsInfo['lastHeartbeatTime']=new Date();
					redis.setItem(mac,JSON.stringify(bsInfo));
					return;
				}
			})
			.catch(err=>{
				console.log("updateHeartbeatTime:Get Redis[BUG]",err)
				return;
			})
		}catch(e){
			console.log("updateHeartbeatTime[BUG]",e);
			return;
		}
	}
	this.updateTrackerStatus=function(data, trackerStatus){
		try{
			db.findOne(bsTable, "*", {"mac":data.mac}, function(err, res){
				if(err){
					console.log("updateTrackerStatus[ERROR]");
				}
				var bsInfo=res[0];
				var timed=new Date();
				var sql="INSERT INTO "+trackerTable+"(deviceTypeKey,bsKey,userKey,babyKey,mac,createdTime) "+
						"VALUES(?,?,?,?,?,?) ON DUPLICATE KEY UPDATE bsKey=?,userKey=?,babyKey=?,updatedTime=?";
				var val=[1,bsInfo.bsKey,bsInfo.userKey,bsInfo.babyKey,data.tracker_mac,
						timed,bsInfo.bsKey,bsInfo.userKey,bsInfo.babyKey,timed];
				db.doquery(sql, val, function(error, res){
					if(error){
						console.log("updateTrackerStatus:Save/Update Tracker[ERROR]");
						return;
					}
					var status=parseInt(trackerStatus,16)==0?2:1;
					var param={
						'action':'tracker_status',
						'status':status,
						'userId':bsInfo.userKey
					}
					process.send(param);
					redis.getItem(data.mac)
					.then(redisData=>{
						if(redisData){
							var bsInfo=JSON.parse(redisData);
							if(status==1){
								bsInfo['tracker_offLine']=false;
								bsInfo['tracker_onLine']=true;
							}else{
								bsInfo['tracker_offLine']=true;
								bsInfo['tracker_onLine']=false;
								setTimeout(function(){
									var outOfR={
										'action':'connectError',
										'errorType':1,
										'userId':bsInfo.userKey,
										'mac':data.mac
									}
									console.log("outOfR:offLine")
									process.send(outOfR);
								},6000);
							}
							redis.setItem(data.mac, JSON.stringify(bsInfo));
						}
					})
					.catch(e=>{
						console.log("updateTrackerStatus:Get Redis[BUG]",e);
					})
				});
			})
		}catch(e){
			console.log("updateTrackerStatus[BUG]",e);
			return;
		}
	}
	this.resolveCurrentData=function(mac,tracker_mac,dataCommand){
		try{
			var data=func.analyCurrentData(dataCommand);
			data['skin_temperature']=data['skin_temperature']/10;
			data['bs_mac']=mac;
			data['tracker_mac']=tracker_mac;

			db.findOne(trackerTable, "bsKey, userKey, babyKey", {"mac":tracker_mac}, function(err, res){
				if(!err && res.length>0){
					var trackerInfo=res[0];
					if(!trackerInfo.userKey || !trackerInfo.babyKey){
						console.log("resolveCurrentData:No User[ERROR]");
						return;
					}
					// console.log("current", data);
					self.isDataTrigger(data, trackerInfo.babyKey, trackerInfo.userKey)
					
				}
				// else{
				// 	console.log("resolveCurrentData:Get Tracker[ERROR]");
				// 	return;
				// }

			})
		}catch(e){
			console.log("resolveCurrentData[BUG]",e);
			return;
		}
	}

	this.onTheGoCurrentData=function(data, callback){
		try{
			var realData={};
			realData['tracker_mac']=data.tracker_mac;
			realData['heart_status']=data.heart_status?Number(data.heart_status):false;
			realData['wear_status']=Number(data.wear_status);
			realData['heart_max']=Number(data.heart_max);
			realData['heart_min']=Number(data.heart_min);
			realData['heart_avg']=Number(data.heart_avg);
			realData['skin_status']=Number(data.skin_status);
			realData['skin_temperature']=parseFloat(data.skin_temperature);
			realData['sleep_position']=Number(data.sleep_position);
			realData['activity_level']=Number(data.activity_level);
			realData['battery_status']=Number(data.battery_status);
			realData['battery_percent']=Number(data.battery_percent);
			realData['rssi']=Number(data.rssi);
			realData['charging_status']=data.charging_status?Number(data.charging_status):0;
			realData['create_time']=Number(new Date().getTime());
			self.isDataTrigger(realData, data.babyid, data.uid);
			callback(null, func.successReturn());
		}catch(e){
			console.log("onTheGoCurrentData[BUG]",e);
			return callback(ErrMsg.UnknownError);
		}
	}
	this.isDataTrigger=function(data, babyKey, userKey){
		try{
			redis.getItem("baby_key_"+babyKey)
			.then(redisData=>{
				var promises=new Promise(function(resolve, reject){
					var babyInfo=new Object();
					self.getBabyInfo(babyKey, userKey, function(error, res){
						if(error){
							reject(true);
						}
						if(redisData && redisData.length>0 && redisData!="{}"){
							babyInfo=JSON.parse(redisData)
						}
						babyInfo['name']=res.name;
						babyInfo['id']=babyKey;
						self.getBabyPushSetting(babyKey, function(e, r){
							if(e){
								console.log("isDataTrigger:Get Baby Push Setting[ERROR]");
								reject(true);
							}
							babyInfo['setting']=r;
							resolve(babyInfo)
						})
					})
					// if(!redisData || redisData.length==0 || redisData == "{}"){
					// 	self.getBabyInfo(babyKey, userKey, function(error, res){
					// 		if(error){
					// 			reject(true);
					// 		}
					// 		babyInfo['name']=res.name;
					// 		// babyInfo['setting']=res.setting;
					// 		babyInfo['id']=babyKey;
					// 		// resolve(res);
					// 	})
					// }else{
					// 	babyInfo=JSON.parse(redisData)
					// }
					// console.log(babyInfo.name)
					// if(!babyInfo.setting){
					// 	self.getBabyPushSetting(babyKey, function(e, r){
					// 		if(e){
					// 			// console.log(e)
					// 			console.log("isDataTrigger:Get Baby Push Setting[ERROR]");
					// 		}
					// 		babyInfo['setting']=r;
					// 		resolve(babyInfo)
					// 	})
					// }else{
					// 	resolve(babyInfo)
					// }
					// console.log(babyInfo.setting)
					// resolve(babyInfo)
				})
				promises
				.then((onFulfilled, onRejected)=>{
					if(onRejected) return;
					// if(!onFulfilled.hasOwnProperty('setting')) return;
					// console.log("onFulfilled", onFulfilled)
					var lasetDataTime=data.create_time;
					


					var temporaryData=new Array();
					if(onFulfilled.hasOwnProperty('temporaryData')){
						temporaryData=onFulfilled.temporaryData;
					}

					var nextSaveData=false;
					if(onFulfilled.hasOwnProperty('nextSaveData')){
						nextSaveData=onFulfilled.nextSaveData;
					}else{
						nextSaveData=lasetDataTime-lasetDataTime%(300*1000)+(300*1000)-1;
					}
					// console.log("lasetDataTime", lasetDataTime)
					// console.log("nextSaveData", nextSaveData)
					if(lasetDataTime>nextSaveData){
						var saveData=func.getFiveMinData(nextSaveData,temporaryData);
						saveData['babyKey']=babyKey;
						saveData['createdTime']=new Date(lasetDataTime);
						db.save(babyDataTable, saveData, function(saveDataErr, saveDataRes){
							console.log("Save Five Min Data");
							if(saveDataErr){
								console.log("isDataTrigger:Save Data[ERROR]");
							}else{
								console.log("Save Record Success!");
							}
						})
						onFulfilled['nextSaveData']=lasetDataTime-lasetDataTime%(300*1000)+(300*1000)-1;
					}else{
						onFulfilled['nextSaveData']=nextSaveData;
					}
					if(temporaryData.length>=600){
						temporaryData=temporaryData.slice(1);
					}

					temporaryData.push(data);

					var firstDataTime=lasetDataTime;
					if(onFulfilled.hasOwnProperty('firstDataTime')){
						firstDataTime=onFulfilled.firstDataTime;
					}

					var startNotify=false;
					if(data.wear_status==1){
						if(!onFulfilled.hasOwnProperty('wear_time'))
							onFulfilled['wear_time']=lasetDataTime;
						if(!onFulfilled.hasOwnProperty('temp_wear_time'))
							onFulfilled['temp_wear_time']=lasetDataTime;
						onFulfilled['last_wear_time']=lasetDataTime;
						if(lasetDataTime-onFulfilled.wear_time >= 30*60*1000){
							startNotify=true;
						}else{
							if(onFulfilled.hasOwnProperty('startNotify'))
								startNotify=onFulfilled.startNotify;
						}
					}else{
						delete onFulfilled.temp_wear_time;
						if(onFulfilled.hasOwnProperty('last_wear_time')){
							if(lasetDataTime-onFulfilled['last_wear_time'] >= 5*60*1000){
								delete onFulfilled.wear_time;
								delete onFulfilled.last_wear_time;
							}else{
								startNotify=onFulfilled.startNotify;
							}
						}
					}
					onFulfilled['startNotify']=startNotify;
					data['startNotify']=startNotify;
					onFulfilled['temporaryData']=temporaryData;
					onFulfilled['firstDataTime']=firstDataTime;

					var OORTimes=onFulfilled.hasOwnProperty('OORTimes')?Number(onFulfilled.OORTimes):0;
					if(data.hasOwnProperty('rssi')){
						var newCount=0;
						if(data.rssi>78){
							if(OORTimes>=5){
								newCount=5;
							}else{
								newCount=OORTimes+1;
								if(newCount==5){
									var outOfR={
										'action':'connectError',
										'errorType':1,
										'userId':userKey,
										'mac':' '
									}
									process.send(outOfR);
								}
							}
							onFulfilled['OORTimes']=newCount;

						}else{
							if(onFulfilled.hasOwnProperty('OORTimes')){
								delete onFulfilled.OORTimes;
							}
						}
					}

					redis.setItem('baby_key_'+babyKey, JSON.stringify(onFulfilled));

					var checkData=func.checkDataTrigger(self.alertType, onFulfilled);
					var currentData=checkData.currentData;
					var targetData=checkData.tragetList;

					currentData['baby_id']=babyKey;
					var param={
						'action':'real_data',
						'data':currentData,
						'userId':userKey
					}
					process.send(param);

					if(currentData['wear_status']==1 && currentData['charging_status']==0){
						var sql="SELECT * FROM "+babyAlertTable+" WHERE userKey=? AND babyKey=? AND status=?";
						var sqlVal=[userKey, babyKey, 1]
						db.doquery(sql, sqlVal, function(err, result){
							if(err){
								console.log("isDataTrigger:Get Baby Alert[ERROR]");
								return;
							}
							var babyAlert=new Object();
							for(var i=0; i<result.length; i++){
								babyAlert[result[i].alertTypeKey]=result[i];
							}
							var triggerRes=func.checkIsNotify(targetData, babyAlert, userKey, babyKey);
							var pushData=triggerRes.pushData;
							if(triggerRes.sql.length>0){
								db.doquery(triggerRes.sql, [], function(err1, res1){})
							}
							if(pushData.length>0){
								self.pushNotification(pushData, userKey, startNotify);
							}
						})
					}

				})
				.catch(e1=>{
					console.log("isDataTrigger:Promise[BUG]",e1);
					return;
				})
			})
			.catch(err=>{
				console.log("isDataTrigger:Redis[BUG]",err);
				return;
			})
		}catch(e){
			console.log("isDataTrigger[BUG]",e);
			return;
		}
	}

	this.pushNotification=function(data, userKey, startNotify){
		try{
			var promises=new Promise(function(resolve, reject){
				redis.getItem("userKey"+userKey)
				.then(redisData=>{
					if(redisData && redisData.length>0 && redisData != "{}"){
						resolve(JSON.parse(redisData));
					}else{
						db.findOne(userTable, "*", {"userKey":userKey}, function(error,r){
							if(error || r.length==0){
								reject(true);
							}
							resolve(r[0]);
						})
					}
				})
				.catch(err=>{
					reject(true);
				})
			})

			promises
			.then((onFulfilled, onRejected)=>{
				if(onRejected) return;
				var device_type=onFulfilled.appPlatformInfo==0?"iOS":"android";
				var notification_token=onFulfilled.notificationToken?onFulfilled.notificationToken:false;
				if(device_type && notification_token){
					var notifyParam={
						'action':'send_notify',
						'device_type':device_type,
						'notification_token':notification_token
					}
					for(var i=0; i<data.length; i++){
						if(!startNotify && (data[i].type!=1 || data[i].type!=2)){
							data[i]['push']=false;
							data[i]['alert']="";
						}
						notifyParam['data']=data[i];
						process.send(notifyParam);
					}
				}
			})
			.catch(e1=>{
				console.log("pushNotification:Promise[BUG]",e1);
				return;
			})
			
		}catch(e){
			console.log("pushNotification[BUG]",e);
			return;
		}
	}

	this.getBabyPushSetting=function(babyKey, callback){
		try{
			var getSetSql=	"SELECT a.*,b.typeName FROM "+babyPushSetTable+" AS a "+
							"LEFT JOIN "+pushSetTypeTable+" AS b ON "+
							"b.settingTypeKey=a.settingTypeKey WHERE a.babyKey=?";
			db.doquery(getSetSql, [babyKey], function(err, res){
				if(err){
					console.log("getBabyPushSetting[ERROR]");
					return callback(err);
				}
				var setObj=new Object();
				for(var i=0; i<res.length; i++){
					setObj[res[i].typeName]={
						"status":res[i].isPush==0?false:true,
						"bell":res[i].bell==0?false:true,
						"push":res[i].notice==0?false:true,
						"shock":res[i].shake==0?false:true,
					}
					if(res[i].typeName=="sleepPosition"){
						setObj[res[i].typeName]["check"]=res[i].check==0?false:true
					}
					if(res[i].typeName=="sleepActivity"){
						setObj[res[i].typeName]["level"]=res[i].level
					}
				}
				callback(null, setObj);
			})
		}catch(e){
			console.log("getBabyPushSetting[BUG]",e);
			return callback(ErrMsg.UnknownError);
		}
	}

	this.getBabyInfo=function(babyKey, userKey, callback){
		try{
			// var promises=new Promise(function(resolve, reject){
			// 	redis.getItem("userKey"+userKey)
			// 	.then(redisData=>{
			// 		if(!redisData || redisData.length==0 || redisData == "{}"){
			// 			reject(true);
			// 		}
			// 		var userInfo=JSON.parse(redisData);
			// 		var babyInfo=false;
			// 		var babyList=userInfo.baby_list;
			// 		for (var i=0; i<babyList.length; i++) {
			// 			if(babyList[i].id==babyKey){
			// 				babyInfo=babyList[i];
			// 				break;
			// 			}
			// 		}
			// 		if(!babyInfo){
			// 			reject(true);
			// 		}else{
			// 			resolve(babyInfo);
			// 		}
					
			// 	})
			// 	.catch(err=>{
			// 		console.log("getRedisBabySet:Get Redis[BUG]",err);
			// 		reject(true);
			// 	})
			// })
			// promises
			// .then((onFulfilled, onRejected)=>{
			// 	if(onRejected){
			// 		db.findOne(babyTable, "name,userKey", {"babyKey":babyKey,"status":0}, function(error, res){
			// 			if(error){
			// 				console.log("getRedisBabySet:Promises[ERROR]");
			// 				return callback(error)
			// 			}
			// 			return callback(null, res[0]);
			// 			// self.getBabyPushSetting(babyKey, function(e1, r1){
			// 			// 	if(!e1){
			// 			// 		res[0]['setting']=r1;
			// 			// 	}
			// 			// 	return callback(null, res[0]);
			// 			// })
			// 		})
			// 	}
			// 	callback(null, onFulfilled)
			// })
			// .catch(e=>{
			// 	console.log("getRedisBabySet:Promises[BUG]",e);
			// 	return callback(ErrMsg.UnknownError)
			// })
			db.findOne(babyTable, "name,userKey", {"babyKey":babyKey,"status":0}, function(error, res){
				if(error){
					console.log("getRedisBabySet:Promises[ERROR]");
					return callback(error)
				}
				return callback(null, res[0]);
				// self.getBabyPushSetting(babyKey, function(e1, r1){
				// 	if(!e1){
				// 		res[0]['setting']=r1;
				// 	}
				// 	return callback(null, res[0]);
				// })
			})
		}catch(e){
			console.log("getRedisBabySet[BUG]",e);
			return callback(ErrMsg.UnknownError)
		}
	}

	this.bindDevice=function(data, callback){
		try{
			var updateData={
				"userKey":data.uid,
				"babyKey":data.babyid
			}
			db.update(bsTable, updateData, {'mac':data.mac}, function(err, res){
				if(err){
					return callback(err)
				}
				callback(func.successReturn());
			})
		}catch(e){
			console.log("bindDevice[BUG]",e);
			return callback(ErrMsg.UnknownError);
		}
	}
	this.OTAResult=function(mac, OTAstatus){
		try{
			redis.getItem(mac)
			.then(redisData=>{
				var bsInfo=JSON.parse(redisData);
				var status=parseInt(OTAstatus,16)
				bsInfo['isSendOTA']=status==0?false:true;
				redis.setItem(mac,JSON.stringify(bsInfo));
				return;
			})
			.catch(err=>{
				console.log("OTAResult:Get Redis[BUG]",err);
				return;
			})
		}catch(e){
			console.log("OTAResult[BUG]",e);
			return;
		}
	}
	this.init();
}
module.exports=DBDevice;